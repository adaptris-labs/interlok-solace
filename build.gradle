plugins {
  id "com.palantir.docker" version "0.26.0"
  id 'com.palantir.docker-compose' version "0.26.0"
}

ext {
  interlokParentGradle = project.findProperty('interlokParentGradle') ?: 'https://raw.githubusercontent.com/adaptris/interlok-build-parent/main/v4/build.gradle'
  dockerImageName = project.findProperty('dockerImageName') ?: "adaptrislabs/interlok-solace"
  dockerImageTag = project.findProperty('dockerImageVersion') ?: "latest"
  buildEnv=project.findProperty("buildEnv") ?: "docker"
  solaceVersion='10.9.1'
  includeWar='true'
  // license-{buildEnv}.properties needs to be copied.
  additionalTemplatedProperties = [
    'license'
  ]
  // Ensure variable substitutions work for 'check'
  interlokVerifyEnvironmentProperties = [
    SOLACE_HOST: "localhost",
    SOLACE_PORT: "55555",
    SOLACE_USER: "admin",
    SOLACE_PASSWORD: "admin"
  ]
  // If running in a CI pipeline, then interlokLicense might be a secret so
  // we cater for that to 'check' work, w/o a license-docker.properties or similar.
  interlokLicense= project.findProperty('interlokLicense') ?: "false"
  interlokVerifySystemProperties = interlokLicense != "false" ? [ "interlok.license.key" : interlokLicense ] : [:]
}

allprojects {
  apply from: "${interlokParentGradle}"
}

dependencies {
  interlokRuntime ("com.adaptris:interlok-solace:$interlokVersion") { changing= true}
  interlokRuntime ("com.adaptris:interlok-xa-jms:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-xa-solace:$interlokVersion") { changing=true }

  interlokRuntime ("com.solacesystems:sol-jms:$solaceVersion")
  interlokRuntime ("com.solacesystems:sol-common:$solaceVersion")
  interlokRuntime ("com.solacesystems:sol-jcsmp:$solaceVersion")

  interlokRuntime ("org.fusesource.jansi:jansi:2.1.1")
}

docker {
  name dockerImageName
  tags dockerImageTag
  copySpec.into("./build/distribution").from(installDist)
  pull true
  noCache true
}

dockerCompose {
  dockerComposeFile "docker-compose.yml"
}

docker.dependsOn check, assemble
// dockerComposeUp.dependsOn docker
